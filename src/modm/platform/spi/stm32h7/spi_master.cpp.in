/*
* Copyright (c) 2009, Martin Rosekeit
* Copyright (c) 2009-2012, Fabian Greif
* Copyright (c) 2010, Georgi Grinshpun
* Copyright (c) 2012-2017, Niklas Hauser
* Copyright (c) 2013, Kevin LÃ¤ufer
* Copyright (c) 2014, Sascha Schade
* Copyright (c) 2023, Christopher Durand
*
* This file is part of the modm project.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
// ----------------------------------------------------------------------------

#include "spi_master_{{id}}.hpp"
#include <modm/architecture/interface/interrupt.hpp>


namespace modm::platform
{

modm::ResumableResult<uint8_t>
SpiMaster{{ id }}::transfer(uint8_t data)
{
	uint8_t rx;
	RF_CALL_BLOCKING(transfer(&data, &rx, 1));
	return {modm::rf::Stop, rx};
}

modm::ResumableResult<void>
SpiMaster{{ id }}::transfer(
		const uint8_t* tx, uint8_t* rx, std::size_t length)
{

    if((tx == nullptr && rx == nullptr) || length == 0) {
      return {modm::rf::Stop};
    }
    tx_mutex_get(&mtx, TX_WAIT_FOREVER);
    // Clear EVENT_TX_IDLE flag
    tx_event_flags_set(&events, ~EVENT_TX_IDLE, TX_AND);

    txbuf = tx;
    rxbuf = rx;
    transfer_len = length;
    tx_len = 0;
    rx_len = 0;

    Hal::enableTransfer();
    Hal::startMasterTransfer();

    // Clear remaining RX (if there is any)
    while(Hal::isRxDataAvailable()) {
      Hal::read();
    }

    // start actual transmission by enabling TxPacketSpaceAvailable interrupt
    Hal::enableInterrupt(Hal::Interrupt::TxPacketSpaceAvailable | Hal::Interrupt::RxPacketAvailable);

    
    ULONG actual = 0;
    tx_event_flags_get(&events, EVENT_TX_IDLE, TX_AND, &actual, TX_WAIT_FOREVER);
    tx_mutex_put(&mtx);
    return {modm::rf::Stop};
}

void
SpiMaster{{ id }}::finishTransfer()
{
    ULONG actual = 0;
    tx_event_flags_get(&events, EVENT_TX_IDLE, TX_AND, &actual, TX_WAIT_FOREVER);
}

void
SpiMaster{{ id }}::isr()
{
const auto flags = Hal::status();

    if(tx_len != transfer_len && flags.any(SpiBase::StatusFlag::TxPacketSpaceAvailable)) {
      while((tx_len < transfer_len) && !Hal::isTxFifoFull()) {
        Hal::write(txbuf ? txbuf[tx_len] : 0);
        ++tx_len;
      }
      
      if(tx_len == transfer_len) {
      	Hal::disableInterrupt(Hal::Interrupt::TxPacketSpaceAvailable);
      }
    }

    if(rx_len != transfer_len && flags.any(SpiBase::StatusFlag::RxPacketAvailable)) {
      while((rx_len < transfer_len) && Hal::isRxDataAvailable()) {
        if(rxbuf) {
          rxbuf[rx_len] = Hal::read();
        } else {
          Hal::read();
        }
        ++rx_len;
      }
      
      if(rx_len == transfer_len) {
    	Hal::disableInterrupt(Hal::Interrupt::RxPacketAvailable);
        Hal::suspendMasterTransfer();
        Hal::disableTransfer();
        tx_event_flags_set(&events, EVENT_TX_IDLE, TX_OR);
      }

    }


    Hal::acknowledgeInterruptFlags(flags);
}

MODM_ISR(SPI{{ id }}) {
    SpiMaster{{ id }}::isr();
  }
  
 
const uint8_t * volatile SpiMaster{{ id }}::txbuf = nullptr;
uint8_t *volatile SpiMaster{{ id }}::rxbuf = nullptr;
volatile size_t SpiMaster{{ id }}::transfer_len = 0;
volatile size_t SpiMaster{{ id }}::tx_len = 0;
volatile size_t SpiMaster{{ id }}::rx_len = 0;
TX_EVENT_FLAGS_GROUP SpiMaster{{ id }}::events{};
TX_MUTEX SpiMaster{{ id }}::mtx{};
  

} // namespace modm::platform
