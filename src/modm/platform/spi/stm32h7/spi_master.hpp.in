/*
 * Copyright (c) 2009-2011, Fabian Greif
 * Copyright (c) 2010, Martin Rosekeit
 * Copyright (c) 2011-2017, Niklas Hauser
 * Copyright (c) 2012, Georgi Grinshpun
 * Copyright (c) 2013, Kevin LÃ¤ufer
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2022-2023, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32H7_SPI_MASTER{{ id }}_HPP
#define MODM_STM32H7_SPI_MASTER{{ id }}_HPP

#include <modm/architecture/interface/spi_lock.hpp>
#include <modm/architecture/interface/spi_master.hpp>
#include <modm/platform/gpio/connector.hpp>
#include <modm/math/algorithm/prescaler.hpp>
%% if use_fiber
#include <modm/processing/fiber.hpp>
%% endif
#include "spi_hal_{{ id }}.hpp"
#include <tx_api.h>

namespace modm::platform
{

/**
 * Serial peripheral interface (SPI{{ id }}).
 *
 * @ingroup	modm_platform_spi modm_platform_spi_{{id}}
 */
class SpiMaster{{ id }} : public modm::SpiMaster, public SpiLock<SpiMaster{{ id }}>
{
%% if not use_fiber
	// Bit0: single transfer state
	// Bit1: block transfer state
	static inline uint8_t state{0};
%% endif
public:
	using Hal = SpiHal{{ id }};

	using DataMode = Hal::DataMode;
	using DataOrder = Hal::DataOrder;
	using DataSize = Hal::DataSize;
	
	  static TX_EVENT_FLAGS_GROUP events;
	  static TX_MUTEX mtx;

	  static const uint8_t * volatile txbuf;
	  static uint8_t *volatile rxbuf;
	  static volatile size_t transfer_len;
	  static volatile size_t rx_len;
	  static volatile size_t tx_len;

	  static constexpr ULONG EVENT_TX_IDLE = 1;

	template< class... Signals >
	static void
	connect()
	{
		using Connector = GpioConnector<Peripheral::Spi{{ id }}, Signals...>;
		using Sck = typename Connector::template GetSignal<Gpio::Signal::Sck>;
		using Mosi = typename Connector::template GetSignal<Gpio::Signal::Mosi>;
		using Miso = typename Connector::template GetSignal<Gpio::Signal::Miso>;

		Sck::setOutput(Gpio::OutputType::PushPull);
		Mosi::setOutput(Gpio::OutputType::PushPull);
		Miso::setInput(Gpio::InputType::Floating);
		Connector::connect();
	}

	template< class SystemClock, baudrate_t baudrate, percent_t tolerance=pct(5) >
	static void
	initialize()
	{
		tx_event_flags_create(&events, "spi events");
		tx_event_flags_set(&events, EVENT_TX_IDLE, TX_OR);
		tx_mutex_create(&mtx, "spi mtx", TX_NO_INHERIT);
		constexpr auto result = modm::Prescaler::from_power(SystemClock::Spi{{ id }}, baudrate, 2, 256);
		assertBaudrateInTolerance< result.frequency, baudrate, tolerance >();

		// translate the prescaler into the bitmapping
		constexpr Hal::Prescaler prescaler{result.index << SPI_CFG1_MBR_Pos};
%% if not use_fiber
		state = 0;
%% endif

		Hal::initialize(prescaler);
		Hal::enableTransfer();
		Hal::startMasterTransfer();
		Hal::enableInterruptVector(true, 12);
	}

	static void
	setDataMode(DataMode mode)
	{
		finishTransfer();
		Hal::setDataMode(mode);
	}

	static void
	setDataOrder(DataOrder order)
	{
		finishTransfer();
		Hal::setDataOrder(order);
	}

	static void
	setDataSize(DataSize size)
	{
		finishTransfer();
		Hal::setDataSize(static_cast<SpiHal{{ id }}::DataSize>(size));
	}

	static uint8_t
	transferBlocking(uint8_t data)
	{
		return RF_CALL_BLOCKING(transfer(data));
	}

	static void
	transferBlocking(const uint8_t* tx, uint8_t* rx, std::size_t length)
	{
		RF_CALL_BLOCKING(transfer(tx, rx, length));
	}


	static modm::ResumableResult<uint8_t>
	transfer(uint8_t data);

	static modm::ResumableResult<void>
	transfer(const uint8_t* tx, uint8_t* rx, std::size_t length);
	static void isr();


private:
	static void
	finishTransfer();
};

} // namespace modm::platform

#endif // MODM_STM32H7_SPI_MASTER{{ id }}_HPP
